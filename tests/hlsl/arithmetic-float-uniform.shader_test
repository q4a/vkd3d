[pixel shader]
uniform float2 a;

float4 main() : SV_TARGET
{
    float x = +a.x;
    float y = a.y;
    return float4(x + y, x - y, x * y, -y);
}

[test]
uniform 0 float4 0.05 0.15 0.0 0.0
draw quad
probe (0, 0) rgba (0.20, -0.10, 0.0075, -0.15) 1


% 1.x has no division or modulo.
[pixel shader notimpl(sm<2)]
uniform float2 a;

float4 main() : SV_TARGET
{
    float x = a.x;
    float y = a.y;
    return float4(x / y, -x / y, x / -y, -x / -y);
}

[test]
uniform 0 float4 42.0 5.0 0.0 0.0
draw quad
probe (0, 0) rgba (8.4, -8.4, -8.4, 8.4) 16


[pixel shader fail(sm<2)]
uniform float2 a;

float4 main() : SV_TARGET
{
    float x = a.x;
    float y = a.y;
    return float4(x % y, -x % y, x % -y, -x % -y);
}

[test]
uniform 0 float4 42.0 5.0 0.0 0.0
draw quad
probe (0, 0) rgba (2.0, -2.0, 2.0, -2.0) 16


[pixel shader fail(sm<2)]
uniform float2 a;

float4 main() : SV_TARGET
{
    float x = a.x;
    float y = a.y;
    return float4(x % y, -x % y, x % -y, -x % -y);
}

[test]
uniform 0 float4 45.0 5.0 0.0 0.0
draw quad
probe (0, 0) rgba (0.0, 0.0, 0.0, 0.0)


[pixel shader fail(sm<2)]
float4 x, y;

float4 main() : sv_target
{
    return x % y;
}

[test]
uniform 0 float4 5.0 -42.1 4.0 45.0
uniform 4 float4 15.0 -5.0 4.1 5.0
draw quad
probe (0, 0) rgba (5.0, -2.1, 4.0, 0.0) 6


[pixel shader notimpl(sm<2)]
uniform float2 a;

float4 main() : SV_TARGET
{
    float x = a.x;
    float y = a.y;
    return x / y;
}

[test]
uniform 0 float4 1.0 0.0 0.0 0.0
draw quad
probe (0, 0) rgba (1e99, 1e99, 1e99, 1e99)


% d3dx9/d3dcompiler < 41 does not have mad().
[pixel shader fail(sm<2)]
uniform float4 a, b, c;

float4 main() : sv_target
{
    return mad(a, b, c);
}

[test]
uniform 0 float4 1.00000007 -42.1 4.0 45.0
uniform 4 float4 1.625 -5.0 4.125 5.0
uniform 8 float4 1.00000007 -1.0 0.5 -0.5
draw quad
probe (0, 0) rgba (2.62500024, 209.5, 17.0, 224.5) 1

% precise mad() is not allowed to fuse, even though unfused is less precise.
[pixel shader fail(sm<2)]
uniform float4 a, b, c;

float4 main() : sv_target
{
    precise float4 ret = mad(a, b, c);
    return ret;
}

[test]
uniform 0 float4 1.00000007 -42.1 4.0 45.0
uniform 4 float4 1.625 -5.0 4.125 5.0
uniform 8 float4 1.00000007 -1.0 0.5 -0.5
draw quad
probe (0, 0) rgba (2.62500048, 209.5, 17.0, 224.5) 1

[require]
shader model >= 5.0
float64

[pixel shader todo]
uniform double2 a;

float4 main() : SV_TARGET
{
    double x = a.x;
    double y = a.y;
    return float4(x + y, x - y, x * y, x / y);
}

[test]
uniform 0 double2 7.5 -2.5
todo(sm<6) draw quad
probe (0, 0) rgba (5.0, 10.0, -18.75, -3.0)

[pixel shader todo]
uniform double2 a;

float4 main() : SV_TARGET
{
    double x = a.x;
    double y = a.y;
    return x * y;
}

[test]
uniform 0 double2 3.0e-300 2.5e300
todo(sm<6) draw quad
probe (0, 0) rgba (7.5, 7.5, 7.5, 7.5)

% Note: DXC does not support modulo on doubles.
[pixel shader todo]
uniform double2 a;

float4 main() : SV_TARGET
{
    double x = a.x;
    double y = a.y;
    return x / y;
}

[test]
uniform 0 double2 1.5e300 2.0e299
todo(sm<6) draw quad
probe (0, 0) rgba (7.5, 7.5, 7.5, 7.5)

[pixel shader todo]
uniform double2 a, b, c;

float4 main() : sv_target
{
    return float4(fma(a, b, c), 0, 0);
}

[test]
uniform 0 double2 1.00000007 -42.1
uniform 4 double2 1.625 -5.0
uniform 8 double2 1.00000007 -1.0
todo(sm<6) draw quad
probe (0, 0) rgba (2.62500024, 209.5, 0.0, 0.0)


% Test result when instructions might be removed because they are identities such as (+0) or (*1).
[pixel shader]
float4 a;

float4 main() : sv_target
{
    float4 zero = {0, 0, 0, 0};
    float4 one = {1, 1, 1, 1};

    return a + zero + a * one + zero * one;
}

[test]
uniform 0 float4 0.2 0.3 9.1 3.2
draw quad
probe (0, 0) rgba (0.4, 0.6, 18.2, 6.4)

[rtv 0]
format r32g32b32a32-uint
size (2d, 640, 480)

[pixel shader todo]
uniform double2 a, b, c, d;

% Return bool4 to ensure that non-trivial destination swizzling happens on the
% DLT instruction, rather than on the instruction to convert the result.
bool4 main() : SV_TARGET
{
    bool2 first = a < b;
    bool2 second = c < d;
    return bool4(first.x, second.x, second.y, first.y);
}

[test]
uniform 0 double2 1.0 3.0
uniform 4 double2 2.0 4.0
uniform 8 double2 5.0 7.0
uniform 12 double2 6.0 8.0
todo(sm<6) draw quad
if(sm<6) probe (0, 0) rgbaui(0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff)
if(sm>=6) probe (0, 0) rgbaui(1, 1, 1, 1)

uniform 0 double2 1.0 4.0
uniform 4 double2 2.0 3.0
uniform 8 double2 5.0 8.0
uniform 12 double2 6.0 7.0
todo(sm<6) draw quad
if(sm<6) probe (0, 0) rgbaui(0xffffffff, 0xffffffff, 0, 0)
if(sm>=6) probe (0, 0) rgbaui(1, 1, 0, 0)

uniform 0 double2 1.0 4.0
uniform 4 double2 2.0 3.0
uniform 8 double2 6.0 7.0
uniform 12 double2 5.0 8.0
todo(sm<6) draw quad
if(sm<6) probe (0, 0) rgbaui(0xffffffff, 0, 0xffffffff, 0)
if(sm>=6) probe (0, 0) rgbaui(1, 0, 1, 0)


[require]
shader model >= 6.2
native-16-bit

[pixel shader]
uniform half4 u;

float4 main() : sv_target
{
    half n = -1.5, m = 65504.0;
    return float4(u.x + n, u.y + m, u.z + n, u.w + m);
}

[test]
uniform 0 uint 0
uniform 1 uint 0x41804180  % 2.75 2.75
draw quad
probe (0, 0) rgba(-1.5, 65504.0, 1.25, 65504.0)

[pixel shader]
uniform half4 u;

float4 main() : sv_target
{
    half n = -1.5, m = 5.5;
    return float4(u.x * n, u.y * m, u.z * n, u.w * m);
}

[test]
uniform 0 uint 0xc1004300   %  3.5 -2.5
uniform 1 uint4 0x3800c480  % -4.5  0.5
draw quad
probe (0, 0) rgba(-5.25, -13.75, 6.75, 2.75)

[pixel shader]
uniform half4 u;

float4 main() : sv_target
{
    half n = 65504.0, m = -0.5;
    return float4(u.x / n, u.y / m, u.z / n, u.w / m);
}

[test]
uniform 0 uint 0x4280e3ff  % -1023.5 3.25
uniform 1 uint 0xc7803000  % 0.125 -7.5
draw quad
probe (0, 0) rgba(-0.0156173706, -6.5, 1.90734863e-06, 15.0) 1
